// PvPulse
// Sends an MQTT message on each pulse generated by the kilowatt meter.
// Will reconnect via ethernet to the MQTT broker if disconnected (but
// will only learn itâ€™s disconnected after a pulse).
// The onboard LED indicates if the board is connected or not.

#include <Ethernet.h>
#include <ArduinoMqttClient.h>

// Configurable variables
const byte interruptPin = 2; // pin that detects pulse
const byte ledPin = 9; // built-in Arduino Ethernet LED
byte mac[6] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; // see sticker on Arduino Ethernet
const char broker[19] = "test.mosquitto.org";
int port = 1883; // for MQTT broker
const char topic[17] = "home/solar/pulse"; // MQTT topic to publish to
// Internal variables
EthernetClient ethClient;
MqttClient mqttClient(ethClient);
bool isConnected = false;

void setup() {
  Serial.begin(9600);
  Serial.println("+ Booting");
  pinMode(interruptPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(interruptPin), pulseDetected, RISING);
  pinMode(ledPin, OUTPUT);
}

void loop() {
  if (isConnected) {
    mqttClient.poll(); // keep alive
  } else {
    if (connect()) {
      Serial.println("+ Ethernet & MQTT connected");
    } else {
      Serial.println("! Ethernet or MQTT connection failed");
      return;
    }
  }
  delay(30000);
}

// Sends an MQTT message if the interruptPin
// detected a voltage increase
void pulseDetected() {
  Serial.println("+ Pulse detected");
  if (isConnected && publish("1")) {
    Serial.println("+ MQTT message sent");
  } else {
    Serial.println("! MQTT message failed");
  }
}

// Keeps track of connection state and turns
// status LED on or off
void setConnected(bool status) {
  isConnected = status;
  digitalWrite(ledPin, status);
}

// Connect to ethernet & an MQTT broker,
// return true on success, false on failure
bool connect() {
  if (Ethernet.begin(mac)) {
    delay(4000); // needs time to connect
  } else {
    setConnected(false);
    return false;
  }
  if (!mqttClient.connect(broker, port)) {
    setConnected(false);
    return false;
  }
  setConnected(true);
  return true;
}

// Send an MQTT message to an already connected broker,
// return true on success, false on failure
bool publish(String payload) {
  int qos = 2; // receive confirmation from broker
  if (mqttClient.beginMessage(topic, payload.length(), false, qos) != 1) {
    setConnected(false);
    return false;
  }
  if (mqttClient.print(payload) != 1) {
    setConnected(false);
    return false;
  }
  if (mqttClient.endMessage() != 1) {
    setConnected(false);
    return false;
  }
  return true;
}
